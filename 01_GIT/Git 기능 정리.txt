- 원칙 
* 디렉토리에는 한글과 띄어쓰기를 배제하기
* 버전관리는 디버깅을 하는데 사용하는 것
* 각각의 버전은 그 버전이 만들어진 시점(stage area)의 snapshot임

- 주요 개념
* HEAD: 현재 작업 중인 커밋을 가리키는 포인터. 일반적으로 작업 중인 브랜치의 마지막 커밋.
* main(or master): 대부분의 저장소에서 기본 브랜치로 사용되는 이름입니다. 이 브랜치에서 프로젝트의 주요 개발 작업이 이루어짐.
* branch: 프로젝트의 다른 버전을 동시에 개발할 수 있게 해주는 독립적인 작업 경로.
1) git branch: 현재 저장소에 있는 모든 브랜치 목록이 출력됨.
2) git branch -r: 원격 저장소의 브랜치 목록이 출력됨.
3) git branch -a: 로컬 브랜치와 원격 브랜치가 모두 출력됨.
* add (stage area): 변경된 파일을 커밋 대기 상태로 만드는 단계. git add 명령어를 사용하면, 해당 파일들은 스테이지 영역에 올라가 커밋을 기다림.
* commit: 변경 사항을 영구적으로 저장하는 버전을 만드는 과정. git commit을 실행하면 스테이지 영역의 파일들이 새로운 커밋으로 기록됨.
* reset: 특정 커밋으로 현재 브랜치를 되돌리는 작업. --soft, --mixed, --hard 옵션을 사용하여 되돌리는 방식을 선택할 수 있음.
1) git reset [file_name]: 특정 파일을 언스테이징
2) git reset --soft [file_name]: 지정된 커밋으로 이동하되 변경 사항을 스테이징 영역에 유지.
3) git reset --mixed  [file_name]: 지정된 커밋으로 이동하되 변경 사항을 작업 영역에 유지. 기본값.
4) git reset --hard [file_name]: 지정된 커밋으로 완전히 되돌리고 모든 변경 사항을 삭제.
5) git reset: HEAD가 가리키는 커밋으로 모든 변경사항을 되돌림. 커밋을 되돌리거나 수정된 파일을 이전 상태로 되돌림.
* checkout: 다른 브랜치로 전환하거나, 특정 파일을 이전 상태로 되돌리는 작업.
1) checkout [commit-hash] -- [file-path]: 특정 파일이나 디렉토리를 이전 상태로 복원함.
* push: 로컬 저장소의 커밋을 원격 저장소에 업로드하는 과정. git push를 사용하면 로컬의 변경 사항을 원격 저장소와 동기화.
* pull: 원격 저장소의 변경 사항을 로컬 저장소로 가져오는 과정. git pull 명령어를 사용하면 원격의 변경 사항을 로컬과 병합.
* merge: 두 브랜치의 변경 사항을 합치는 과정. git merge를 사용하면 한 브랜치의 변경 사항을 다른 브랜치와 병합할 수 있음.
* clone: 원격 저장소의 내용을 로컬 컴퓨터에 복사하는 과정. git clone 명령어로 저장소의 전체 이력을 복사할 수 있음.
* fetch: 원격 저장소의 변경 사항을 로컬로 가져오되, 병합하지 않는 과정. git fetch 명령어로 원격 변경 사항을 로컬에 반영할 수 있음.
* rebase: 한 브랜치의 커밋을 다른 브랜치 위로 옮기는 과정. git rebase를 사용하면 커밋 히스토리를 깔끔하게 유지할 수 있음.
* git log: 현재 상태를 확인함.
1) git log --graph --all --oneline

